using CdCSharp.SyntaxHighlight.Patterns;
using System.Drawing;

namespace CdCSharp.SyntaxHighlight.Languages;

public partial class Definitions
{
    public static Definition HaskellDefinition = new(
        name: "Haskell",
        caseSensitive: true,
        style: new Style(
            new ColorPair(
                foreColor: Color.FromName("black"),
                backColor: Color.FromName("transparent")
            ),
            new Font(
                name: "monospace",
                size: 16f,
                style: FontStyle.Regular
            )
        ),
        patterns: new Dictionary<string, Pattern>()
    {
{
    "Comment", new BlockPattern(
            name: "Comment",
            style: new Style(
                new ColorPair(
                    foreColor: Color.FromName("green"),
                    backColor: Color.FromName("transparent")
                ),
                new Font(
                    name: "monospace",
                    size: 16f,
                    style: FontStyle.Regular
                )
            ),
            beginsWith: "//",
            endsWith: "\n",
            escapesWith: ""
        )
},
{
    "MultiLineComment", new BlockPattern(
            name: "MultiLineComment",
            style: new Style(
                new ColorPair(
                    foreColor: Color.FromName("green"),
                    backColor: Color.FromName("transparent")
                ),
                new Font(
                    name: "monospace",
                    size: 16f,
                    style: FontStyle.Regular
                )
            ),
            beginsWith: "/*",
            endsWith: "*/",
            escapesWith: ""
        )
},
{
    "String", new BlockPattern(
            name: "String",
            style: new Style(
                new ColorPair(
                    foreColor: Color.FromName("darkred"),
                    backColor: Color.FromName("transparent")
                ),
                new Font(
                    name: "monospace",
                    size: 16f,
                    style: FontStyle.Regular
                )
            ),
            beginsWith: "\"",
            endsWith: "\"",
            escapesWith: "\\"
        )
},
{
    "WordGroup01", new WordPattern(
            name: "WordGroup01",
            style: new Style(
                new ColorPair(
                    foreColor: Color.FromName("blue"),
                    backColor: Color.FromName("transparent")
                ),
                new Font(
                    name: "monospace",
                    size: 16f,
                    style: FontStyle.Regular
                )
            ),
            words:
            [
                "zipWith3",
                "zipWith",
                "zip3",
                "zip",
                "writeFile",
                "words",
                "userError",
                "unzip3",
                "unzip",
                "unwords",
                "until",
                "unlines",
                "undefined",
                "uncurry",
                "truncate",
                "True",
                "toRational",
                "toInteger",
                "toEnum",
                "tanh",
                "tan",
                "takeWhile",
                "take",
                "tail",
                "sum",
                "succ",
                "subtract",
                "String",
                "sqrt",
                "splitAt",
                "span",
                "snd",
                "sinh",
                "sin",
                "signum",
                "significand",
                "showString",
                "showsPrec",
                "ShowS",
                "shows",
                "showParen",
                "showList",
                "showChar",
                "Show",
                "show",
                "sequence_",
                "sequence",
                "seq",
                "scanr1",
                "scanr",
                "scanl1",
                "scanl",
                "scaleFloat",
                "round",
                "Right",
                "reverse",
                "return",
                "replicate",
                "repeat",
                "rem",
                "recip",
                "realToFrac",
                "RealFrac",
                "RealFloat",
                "Real",
                "readsPrec",
                "ReadS",
                "reads",
                "readParen",
                "readLn",
                "readList",
                "readIO",
                "readFile",
                "Read",
                "read",
                "quotRem",
                "quot",
                "putStrLn",
                "putStr",
                "putChar",
                "properFraction",
                "product",
                "print",
                "pred",
                "pi",
                "otherwise",
                "Ordering",
                "Ord",
                "or",
                "odd",
                "Num",
                "null",
                "Nothing",
                "notElem",
                "not",
                "negate",
                "Monad",
                "mod",
                "minimum",
                "minBound",
                "min",
                "Maybe",
                "maybe",
                "maximum",
                "maxBound",
                "max",
                "mapM_",
                "mapM",
                "map",
                "LT",
                "lookup",
                "logBase",
                "log",
                "lines",
                "lex",
                "length",
                "Left",
                "lcm",
                "last",
                "Just",
                "iterate",
                "isNegativeZero",
                "isNaN",
                "isInfinite",
                "isIEEE",
                "isDenormalized",
                "IOError",
                "ioError",
                "IO",
                "interact",
                "Integral",
                "Integer",
                "Int",
                "init",
                "id",
                "head",
                "GT",
                "getLine",
                "getContents",
                "getChar",
                "gcd",
                "Functor",
                "fst",
                "fromRational",
                "fromIntegral",
                "fromInteger",
                "fromEnum",
                "Fractional",
                "foldr1",
                "foldr",
                "foldl1",
                "foldl",
                "floor",
                "floatRange",
                "floatRadix",
                "Floating",
                "floatDigits",
                "Float",
                "flip",
                "FilePath",
                "False",
                "fail",
                "exponent",
                "exp",
                "even",
                "error",
                "EQ",
                "Eq",
                "enumFromTo",
                "enumFromThenTo",
                "enumFromThen",
                "enumFrom",
                "Enum",
                "encodeFloat",
                "elem",
                "Either",
                "dropWhile",
                "drop",
                "Double",
                "divMod",
                "div",
                "decodeFloat",
                "data",
                "cycle",
                "curry",
                "cosh",
                "cos",
                "const",
                "concatMap",
                "concat",
                "compare",
                "Char",
                "ceiling",
                "catch",
                "break",
                "Bounded",
                "Bool",
                "atanh",
                "atan2",
                "atan",
                "asTypeOf",
                "asinh",
                "asin",
                "applyM",
                "appendFile",
                "any",
                "and",
                "all",
                "acosh",
                "acos",
                "abs",
            ]
        )
},
    });
}